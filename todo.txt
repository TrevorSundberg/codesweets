DONE - Lets get this code running in a browser
DONE - Make it work with optimizations
DONE - Maybe just try actually exporting the var and then at the bottom of the script we do the default export?

Setup a react page where we can see the json schema UI for one component
 - Then make it work for a pre-setup version of a bunch of components
 - Then make components addable/removable

Need to get the database working so we can detect all exported classes
 - Or we just have users enter the names of the components into a database... easier!
 - With the way we're doing dependencies we don't really need to know the inputs/outputs or even schema
 - Because we're going to actually build the object live
 - The only thing is being able to import the javascript files on the fly
 - We can just make a premade list of the files for now

Run all the build tasks in parallel

Source mapping is probably messed up by my additions, see if we can make a webpack plugin to do it properly

Find a way to make it an error if you include another sweet packed file directly (not imported)

Make sure we can declare external libraries with the sweet packer (basically just other components)

We can't easily pack everything up, but we can declare externals
 - So we can have multiple builds
 - We can add import lines ourselves
 - We can export default in the header

Setup webpack with React - https://www.valentinog.com/blog/babel/
Get React JSX working with TypeScript
Building with a build server (Travis CI)
